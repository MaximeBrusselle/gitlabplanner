---
import LayoutSidebar from "@layouts/LayoutSideBar.astro";
import { groupUsersByOrg } from "@utils/groupUsersByOrg";
import { z } from "zod";
import UserSelector from "@components/sprints/UserSelector";

const currentUserId = Astro.locals.auth().userId;
if (!currentUserId) {
	return Astro.redirect("/sprints");
}

const { sprintId } = Astro.params;

// Define schema for sprint data
const sprintSchema = z.object({
	name: z.string().min(1, "Sprint name is required"),
	description: z.string().optional(),
	startDate: z.string().min(1, "Start date is required"),
	endDate: z.string().min(1, "End date is required"),
	members: z.array(z.string()).min(1, "At least one member is required").default([currentUserId]),
});

// Fetch sprint data
const sprintResponse = await fetch(new URL(`/api/sprints/${sprintId}`, Astro.url), {
	headers: {
		Authorization: `Bearer ${await Astro.locals.auth().getToken()}`,
	},
});

if (!sprintResponse.ok) {
	return Astro.redirect("/sprints");
}

const sprint = await sprintResponse.json().then((data) => data.sprint);

// Fetch users for the form
const response = await fetch(new URL("/api/users", Astro.url), {
	headers: {
		Authorization: `Bearer ${await Astro.locals.auth().getToken()}`,
	},
});
const { users } = await response.json();
const groupedUsers = groupUsersByOrg(users);

// Initialize errors object with type
type FormErrors = {
	[key: string]: string;
};
let errors: FormErrors = {};

// Handle form submission
if (Astro.request.method === "POST") {
	const formData = await Astro.request.formData();
	const data = {
		name: formData.get("name"),
		description: formData.get("description"),
		startDate: formData.get("startDate"),
		endDate: formData.get("endDate"),
		members: formData.getAll("members"),
	};

	try {
		// Validate the data
		const validatedData = sprintSchema.parse(data);

		const updateResponse = await fetch(new URL(`/api/sprints/${sprintId}`, Astro.url), {
			method: "PATCH",
			headers: {
				"Content-Type": "application/json",
				Authorization: `Bearer ${await Astro.locals.auth().getToken()}`,
			},
			body: JSON.stringify(validatedData),
		});

		if (updateResponse.ok) {
			return Astro.redirect(`/sprints/${sprintId}`);
		}
	} catch (error) {
		if (error instanceof z.ZodError) {
			console.error("Validation error");
			errors = error.errors.reduce<FormErrors>((acc, curr) => {
				acc[curr.path[0].toString()] = curr.message;
				return acc;
			}, {});
		}
	}
}
---

<LayoutSidebar title="Edit Sprint">
	<div
		class="bg-gradient-to-r from-slate-100 to-slate-200 dark:from-slate-900 dark:to-slate-800 text-slate-800 dark:text-slate-100 mb-20 p-4 lg:p-16 shadow-xl shadow-slate-200 dark:shadow-slate-900"
	>
		<div class="p-4 border-2 border-dashed border-gray-400 rounded-lg dark:border-gray-700 mt-14">
			<h1 class="text-2xl font-bold mb-6 text-gray-900 dark:text-white">‚úèÔ∏è Edit Sprint</h1>

			<form method="POST" class="space-y-6">
				<div class="p-4 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
					<h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">üìù General Information</h2>

					<div class="mb-4">
						<label for="name" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
							Sprint Name <span class="text-red-500">*</span>
						</label>
						<input
							type="text"
							id="name"
							name="name"
							value={sprint.name}
							class={`bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white ${errors.name ? "border-red-500" : "border-gray-300"}`}
							placeholder="Enter sprint name"
						/>
						{errors.name && <p class="mt-2 text-sm text-red-600 dark:text-red-500">{errors.name}</p>}
					</div>

					<div>
						<label for="description" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
							Description <span class="text-gray-500 text-sm">(Optional)</span>
						</label>
						<textarea
							id="description"
							name="description"
							rows="4"
							class={`block p-2.5 w-full text-sm text-gray-900 bg-gray-50 rounded-lg border focus:ring-primary-500 focus:border-primary-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white ${errors.description ? "border-red-500" : "border-gray-300"}`}
							placeholder="Enter sprint description">{sprint.description}</textarea
						>
						{errors.description && <p class="mt-2 text-sm text-red-600 dark:text-red-500">{errors.description}</p>}
					</div>
				</div>

				<div class="p-4 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
					<h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">üìÖ Sprint Duration</h2>

					<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
						<div>
							<label for="startDate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
								Start Date <span class="text-red-500">*</span>
							</label>
							<input
								type="date"
								id="startDate"
								name="startDate"
								value={sprint.startDate}
								class={`bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.startDate ? "border-red-500" : "border-gray-300"}`}
							/>
							{errors.startDate && <p class="mt-2 text-sm text-red-600 dark:text-red-500">{errors.startDate}</p>}
						</div>

						<div>
							<label for="endDate" class="block mb-2 text-sm font-medium text-gray-900 dark:text-white">
								End Date <span class="text-red-500">*</span>
							</label>
							<input
								type="date"
								id="endDate"
								name="endDate"
								value={sprint.endDate}
								class={`bg-gray-50 border text-gray-900 text-sm rounded-lg focus:ring-primary-500 focus:border-primary-500 block w-full p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:text-white ${errors.endDate ? "border-red-500" : "border-gray-300"}`}
							/>
							{errors.endDate && <p class="mt-2 text-sm text-red-600 dark:text-red-500">{errors.endDate}</p>}
						</div>
					</div>
				</div>

				<div class="p-4 bg-white border border-gray-200 rounded-lg shadow dark:bg-gray-800 dark:border-gray-700">
					<h2 class="text-xl font-semibold mb-4 text-gray-900 dark:text-white">üë• Team Members</h2>
					<UserSelector client:load groupedUsers={groupedUsers} currentUserId={currentUserId ?? ""} addedUsers={sprint.members.map((member: any) => member.id)} />
					{errors.members && <p class="mt-2 text-sm text-red-600 dark:text-red-500">{errors.members}</p>}
				</div>

				<div class="flex flex-col sm:flex-row justify-end gap-2">
					<a
						href={`/sprints/${sprintId}`}
						class="text-white bg-gray-500 hover:bg-gray-600 focus:ring-4 focus:ring-gray-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-gray-600 dark:hover:bg-gray-700 dark:focus:ring-gray-800"
					>
						‚ùå Cancel
					</a>
					<button
						type="submit"
						class="text-white bg-primary-700 hover:bg-primary-800 focus:ring-4 focus:ring-primary-300 font-medium rounded-lg text-sm px-5 py-2.5 text-center dark:bg-primary-600 dark:hover:bg-primary-700 dark:focus:ring-primary-800"
					>
						üíæ Save Changes
					</button>
				</div>
			</form>
		</div>
	</div>
</LayoutSidebar>
